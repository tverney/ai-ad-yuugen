# Multi-stage build for AI Ad Yuugen Server
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages/server/package*.json ./packages/server/
COPY packages/types/package*.json ./packages/types/

# Install dependencies
RUN npm ci --workspace=packages/server --workspace=packages/types

# Copy source code
COPY packages/server ./packages/server
COPY packages/types ./packages/types
COPY tsconfig.json ./
COPY nx.json ./

# Build packages
RUN npm run build --workspace=packages/types
RUN npm run build --workspace=packages/server

# Production stage
FROM node:20-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs packages/server/package*.json ./packages/server/
COPY --chown=nodejs:nodejs packages/types/package*.json ./packages/types/

# Install production dependencies only
RUN npm ci --workspace=packages/server --workspace=packages/types --omit=dev

# Copy built artifacts from builder
COPY --chown=nodejs:nodejs --from=builder /app/packages/server/dist ./packages/server/dist
COPY --chown=nodejs:nodejs --from=builder /app/packages/types/dist ./packages/types/dist

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start server
CMD ["node", "packages/server/dist/index.js"]
