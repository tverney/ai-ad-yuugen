# Multi-stage build for AI Ad Yuugen Developer Portal
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages/developer-portal/package*.json ./packages/developer-portal/
COPY packages/types/package*.json ./packages/types/
COPY packages/sdk/package*.json ./packages/sdk/

# Install dependencies
RUN npm ci --workspace=packages/developer-portal --workspace=packages/types --workspace=packages/sdk

# Copy source code
COPY packages/developer-portal ./packages/developer-portal
COPY packages/types ./packages/types
COPY packages/sdk ./packages/sdk
COPY tsconfig.json ./
COPY nx.json ./

# Build packages
RUN npm run build --workspace=packages/types
RUN npm run build --workspace=packages/sdk
RUN npm run build --workspace=packages/developer-portal

# Production stage with nginx
FROM nginx:alpine

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copy built static files
COPY --from=builder /app/packages/developer-portal/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx && adduser -S nginx -u 1001 -G nginx

# Set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
